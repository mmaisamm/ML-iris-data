"""
Created on Thu Aug  2 14:44:17 2018

@author: jafrisa
"""
# shape
print(dataset.shape)

# head
print(dataset.head(20))

# descriptions
print(dataset.describe())
 
# class distribution
print(dataset.groupby('class').size())

# box and whisker plots
dataset.plot(kind='box', subplots=True, layout=(2,2), sharex=False, sharey=False)
plt.show()


# histograms
dataset.hist()
plt.show()


# scatter plot matrix
scatter_matrix(dataset)
plt.show()

# Separate out a validation dataset.
# Set-up the test harness to use 10-fold cross validation.
# Build 5 different models to predict species from flower measurements
# Select the best model.

Split validation dataset
array = dataset.values
X = array[:,0:4]
Y = array[:,4]
validation_size = .2
seed = 7
X_train, X_validation, Y_train, Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)

# Test options and evaluation metrix
seed = 7
scoring = 'accuracy'

# simple linear (LR and LDA), nonlinear (KNN, CART, NB and SVM)
# Logistic Regression (LR)
# Linear Discriminant Analysis (LDA)
# K-Nearest Neighbors (KNN).
# Classification and Regression Trees (CART).
# Gaussian Naive Bayes (NB).
# Support Vector Machines (SVM).

# Checking Algorithms
models = []
models.append(('LR', LogisticRegression()))
models.append(('LDA', LinearDiscriminantAnalysis()))
models.append(('KNN', KNeighborsClassifier()))
models.append(('CART', DecisionTreeClassifier()))
models.append(('NB', GaussianNB()))
models.append(('SVM', SVC()))
results = []
names = []
for name, model in models:
    kfold = model_selection.KFold(n_splits=10, random_state=seed)
    cv_results = model_selection.cross_val_score(model, X_train, Y_train, cv=kfold, scoring=scoring)
    results.append(cv_results)
    names.append(name)
    msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
    print(msg)

# Importance and Effect of Random Numbers in ML
# randomness in data collection, data order, algorithm, sampling, resampling
# order of observation affects model's internal decisions (neural networks in particular)
# random subsamples
    
# Each algorithm evaluated 10 times for 10 fold cross validation

# Algorithm Comparison
fig = plt.figure()
fig.suptitle('Algorithm Comparison')
ax = fig.add_subplot(111)
plt.boxplot(results)
ax.set_xticklabels(names)
plt.show()

# A confusion matrix is a technique for summarizing the performance of a classification algorithm
# The confusion matrix shows the ways in which your classification model is confused when it makes predictions.
# How though?
# You need a test dataset or a validation dataset with expected outcome values.
# Make a prediction for each row in your test dataset.
# From the expected outcomes and predictions count:
# The number of correct predictions for each class.
# The number of incorrect predictions for each class, organized by the class that was predicted.
# Organized in a table which can be read as follows
# Expected down the side: Each row of the matrix corresponds to a predicted class.
# Predicted across the top: Each column of the matrix corresponds to an actual class.


# Make predictions on validation dataset
knn = KNeighborsClassifier()
knn.fit(X_train, Y_train)
predictions = knn.predict(X_validation)
print(accuracy_score(Y_validation, predictions))
print(confusion_matrix(Y_validation, predictions))
print(classification_report(Y_validation, predictions))



